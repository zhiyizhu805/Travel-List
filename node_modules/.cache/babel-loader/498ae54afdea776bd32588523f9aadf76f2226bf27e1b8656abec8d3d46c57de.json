{"ast":null,"code":"var _jsxFileName = \"/Users/zhiyizhu/Documents/web/Javascript/react/ultimate-react-course-main/05-travel-list/travel-list/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n//1. create form element\n//  - inside the form,use Array.from({length:},callBackFunctionInMapFunction)\n//2. listening for the submit event that happens on the form use onSubmit={}\n//  - the event will happen as soon as we click the button or hit enter while\n//    we are in the input element\n\nimport { useState } from \"react\";\nimport Logo from \"./logo.js\";\nimport Form from \"./form.js\";\n//controlled elements\n//explain    -> by default,input fields maintain their own state inside the DOM,\n//              inside the HTML element itself.This makes it hard to read the values.\n//what we do -> in react ,we usually like to keep all the state in one central place\n//              inside the react application,not inside the DOM\n//              in order to do that ,we use a technique call controlled elements\n//              with this technique,it's react who controls and owns the state of these\n//              input fields not DOM.\n//              - form data changes over time, we need to use state to maintain our\n//                application in sync with it.\n//1.define a state\n//2.use the state on the element we want to control\n//  basically force the element to always take the value of the state variable\n//  then update the state variable with using the onChange handler\n//  - add listener onChange to input field\n//3.set inputValue to stateValue  value={stateValue}\n\n//  keep state and DOM in sync! so we can manipulate the state use setter function\n//  to also manipulate the DOM.\n//  each time the input value change,use setter function to update the changed value\n//  to stateValue:setterFunction(e.target.value).Which will then re-render this view\n//  and then the new state value will get placed there as the value\n//  - we always both need the value and the change in the input tag\n\n//life up state - move state to the closest common parent component\n//whenever multiple sibling components need access to the same state.\n//We move that piece of state to the first common parent component.\n//background:\n//inside Form component,we define a state(and setter function) to allow us use setter\n//function to add items to the state.But we never use/render the state itself inside\n//the Form component.We need to use/render the state in the Packinglist component\n//which is a sibling component to Form component.So we lift the state up to their closest\n//common component -> App\n//steps: 1.lift up state itself and all the logic about updating the state(e.g setter function)\n//         to the closest common parent component\n//       2.pass state itself / and the functio(for updating the state) to child components\n//         where need to access the state,or need to update the state.\n\n//explanation:\n//1.lift state that will need to be accessed by multiple child sibling components.\n//2.pass the state into the child component(PackingList) as props  so that list can be\n//  rendered according to the state passed in\n//3.in order to enable the child component(Form) to update the state,we need to lift up\n//  the handleAddItems function(which contains the setter function()),then pass the\n//  handleAddItems function as a prop to the Form component.In this way ,we can update\n//  state inside Form(child) component\n//  -inside the child component,receive and destruct the props and call it with newly\n//   add item information\n//  -1 is the home of the items/state itself. 3 is all the logic about updating the state\n//  should be in the same component.now 1 + 3 are sitting in the parent component,then we\n//  can give access to the child sibling components by passing state itself and the setter\n//  function as props.So all child components can access to the same state in the parent\n//  component.\n//  -note: we can pass anything as a prop,including function.we can pass the function as\n//         a prop,then access/use the function inside child component.\n\n//derived state\n//derived state/variable is computed from an existing piece of state or from props\n//when the existing state updated,the component will be re-rendered.\n//the derived state(variable) will also be recalculate based on new situdation\n// const initialItems = [\n//   { id: 1, description: \"Passports\", quantity: 2, packed: false },\n//   { id: 2, description: \"Socks\", quantity: 12, packed: false },\n//   { id: 3, description: \"charger\", quantity: 12, packed: true },\n//   { id: 4, description: \"tooth brush\", quantity: 12, packed: false },\n//   { id: 5, description: \"wallet\", quantity: 12, packed: false },\n//   { id: 6, description: \"passport\", quantity: 12, packed: true },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [items, setItems] = useState([]);\n  //❌ const [numItems, setNumItems] = useState(0);\n  // const numItems = items.length;\n  function handleAddItems(item) {\n    //adding new items to the state\n    setItems(items => [...items, item]);\n  }\n  function handleDeleteItems(id) {\n    setItems(items => items.filter(item => item.id !== id));\n  }\n  function handleToggleItem(id) {\n    setItems(items => items.map(item =>\n    //update an object in an array\n    item.id === id ? {\n      ...item,\n      packed: !item.packed\n    } : item));\n  }\n  function handleClearAll() {\n    //create a web API function to double check\n    const confirmed = window.confirm(\"Are you sure you want to delete all items?\");\n    // setItems((items) => []);\n    if (confirmed) setItems([]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onAddItems: handleAddItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PackingList, {\n      items: items,\n      onDeleteItems: handleDeleteItems,\n      onToggleItem: handleToggleItem,\n      onClearAll: handleClearAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stats, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6WAym07vHedVzpAy8bFDJKqtv8I=\");\n_c = App;\nfunction PackingList({\n  items,\n  onDeleteItems,\n  onToggleItem,\n  onClearAll\n}) {\n  _s2();\n  const [sortBy, setSortBy] = useState(\"input\");\n  let sortedItems;\n  if (sortBy === \"input\") sortedItems = items;\n  if (sortBy === \"description\") sortedItems = items.slice().sort((a, b) => a.description.localeCompare(b.description));\n  if (sortBy === \"packed\") sortedItems = items.slice().sort((a, b) => Number(a.packed) - Number(b.packed));\n  //Number(fasle) -> 0 ,Number(true) -> 1\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sortedItems.map(item => /*#__PURE__*/_jsxDEV(Item, {\n        item: item,\n        onDeleteItems: onDeleteItems,\n        onToggleItem: onToggleItem\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: sortBy,\n        onChange: e => setSortBy(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"input\",\n          children: \"Sort by input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"description\",\n          children: \"Sort by description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"packed\",\n          children: \"Sort by packed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClearAll,\n        children: \"Clear list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s2(PackingList, \"3HXYaurhTOKrR4QsMAxSV7huNGI=\");\n_c2 = PackingList;\nfunction Item({\n  item,\n  onDeleteItems,\n  onToggleItem\n}) {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"list\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      style: item.packed ? {\n        textDecoration: \"line-through\"\n      } : {},\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: e => onToggleItem(item.id),\n        value: item.packed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), \" \", item.quantity, \" \", item.description, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onDeleteItems(item.id),\n        children: \"\\u274C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n_c3 = Item;\nfunction Stats({\n  items\n}) {\n  //when items.length = 0,0 is falsy value\n  if (!items.length) return /*#__PURE__*/_jsxDEV(\"footer\", {\n    className: \"stats\",\n    children: \"Start adding some items to your packing list \\uD83D\\uDE80!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 7\n  }, this);\n  const numItems = items.length;\n  const numPacked = items.filter(item => item.packed === true).length;\n  const packedPecentage = (numPacked / numItems).toFixed(2) * 100;\n  return /*#__PURE__*/_jsxDEV(\"footer\", {\n    className: \"stats\",\n    children: packedPecentage === 100 ? /*#__PURE__*/_jsxDEV(\"em\", {\n      children: \"'You got everything! Ready to go!'\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"em\", {\n      children: [\"\\uD83D\\uDCBC You have \", numItems, \" items in your list, and you already packed\", numPacked, \" (\", packedPecentage, \"%).\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_c4 = Stats;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"PackingList\");\n$RefreshReg$(_c3, \"Item\");\n$RefreshReg$(_c4, \"Stats\");","map":{"version":3,"names":["useState","Logo","Form","jsxDEV","_jsxDEV","App","_s","items","setItems","handleAddItems","item","handleDeleteItems","id","filter","handleToggleItem","map","packed","handleClearAll","confirmed","window","confirm","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddItems","PackingList","onDeleteItems","onToggleItem","onClearAll","Stats","_c","_s2","sortBy","setSortBy","sortedItems","slice","sort","a","b","description","localeCompare","Number","className","Item","value","onChange","e","target","onClick","_c2","style","textDecoration","type","quantity","_c3","length","numItems","numPacked","packedPecentage","toFixed","_c4","$RefreshReg$"],"sources":["/Users/zhiyizhu/Documents/web/Javascript/react/ultimate-react-course-main/05-travel-list/travel-list/src/App.js"],"sourcesContent":["//1. create form element\n//  - inside the form,use Array.from({length:},callBackFunctionInMapFunction)\n//2. listening for the submit event that happens on the form use onSubmit={}\n//  - the event will happen as soon as we click the button or hit enter while\n//    we are in the input element\n\nimport { useState } from \"react\";\nimport Logo from \"./logo.js\";\nimport Form from \"./form.js\";\n//controlled elements\n//explain    -> by default,input fields maintain their own state inside the DOM,\n//              inside the HTML element itself.This makes it hard to read the values.\n//what we do -> in react ,we usually like to keep all the state in one central place\n//              inside the react application,not inside the DOM\n//              in order to do that ,we use a technique call controlled elements\n//              with this technique,it's react who controls and owns the state of these\n//              input fields not DOM.\n//              - form data changes over time, we need to use state to maintain our\n//                application in sync with it.\n//1.define a state\n//2.use the state on the element we want to control\n//  basically force the element to always take the value of the state variable\n//  then update the state variable with using the onChange handler\n//  - add listener onChange to input field\n//3.set inputValue to stateValue  value={stateValue}\n\n//  keep state and DOM in sync! so we can manipulate the state use setter function\n//  to also manipulate the DOM.\n//  each time the input value change,use setter function to update the changed value\n//  to stateValue:setterFunction(e.target.value).Which will then re-render this view\n//  and then the new state value will get placed there as the value\n//  - we always both need the value and the change in the input tag\n\n//life up state - move state to the closest common parent component\n//whenever multiple sibling components need access to the same state.\n//We move that piece of state to the first common parent component.\n//background:\n//inside Form component,we define a state(and setter function) to allow us use setter\n//function to add items to the state.But we never use/render the state itself inside\n//the Form component.We need to use/render the state in the Packinglist component\n//which is a sibling component to Form component.So we lift the state up to their closest\n//common component -> App\n//steps: 1.lift up state itself and all the logic about updating the state(e.g setter function)\n//         to the closest common parent component\n//       2.pass state itself / and the functio(for updating the state) to child components\n//         where need to access the state,or need to update the state.\n\n//explanation:\n//1.lift state that will need to be accessed by multiple child sibling components.\n//2.pass the state into the child component(PackingList) as props  so that list can be\n//  rendered according to the state passed in\n//3.in order to enable the child component(Form) to update the state,we need to lift up\n//  the handleAddItems function(which contains the setter function()),then pass the\n//  handleAddItems function as a prop to the Form component.In this way ,we can update\n//  state inside Form(child) component\n//  -inside the child component,receive and destruct the props and call it with newly\n//   add item information\n//  -1 is the home of the items/state itself. 3 is all the logic about updating the state\n//  should be in the same component.now 1 + 3 are sitting in the parent component,then we\n//  can give access to the child sibling components by passing state itself and the setter\n//  function as props.So all child components can access to the same state in the parent\n//  component.\n//  -note: we can pass anything as a prop,including function.we can pass the function as\n//         a prop,then access/use the function inside child component.\n\n//derived state\n//derived state/variable is computed from an existing piece of state or from props\n//when the existing state updated,the component will be re-rendered.\n//the derived state(variable) will also be recalculate based on new situdation\n// const initialItems = [\n//   { id: 1, description: \"Passports\", quantity: 2, packed: false },\n//   { id: 2, description: \"Socks\", quantity: 12, packed: false },\n//   { id: 3, description: \"charger\", quantity: 12, packed: true },\n//   { id: 4, description: \"tooth brush\", quantity: 12, packed: false },\n//   { id: 5, description: \"wallet\", quantity: 12, packed: false },\n//   { id: 6, description: \"passport\", quantity: 12, packed: true },\n// ];\n\nexport default function App() {\n  const [items, setItems] = useState([]);\n  //❌ const [numItems, setNumItems] = useState(0);\n  // const numItems = items.length;\n  function handleAddItems(item) {\n    //adding new items to the state\n    setItems((items) => [...items, item]);\n  }\n  function handleDeleteItems(id) {\n    setItems((items) => items.filter((item) => item.id !== id));\n  }\n  function handleToggleItem(id) {\n    setItems((items) =>\n      items.map((item) =>\n        //update an object in an array\n        item.id === id ? { ...item, packed: !item.packed } : item\n      )\n    );\n  }\n  function handleClearAll() {\n    //create a web API function to double check\n    const confirmed = window.confirm(\n      \"Are you sure you want to delete all items?\"\n    );\n    // setItems((items) => []);\n    if (confirmed) setItems([]);\n  }\n  return (\n    <div>\n      <Logo />\n      {/* naming convention onFunctioName = handleFunctionName */}\n      <Form onAddItems={handleAddItems} />\n      <PackingList\n        items={items}\n        onDeleteItems={handleDeleteItems}\n        onToggleItem={handleToggleItem}\n        onClearAll={handleClearAll}\n      />\n      <Stats items={items} />\n    </div>\n  );\n}\n\nfunction PackingList({ items, onDeleteItems, onToggleItem, onClearAll }) {\n  const [sortBy, setSortBy] = useState(\"input\");\n  let sortedItems;\n  if (sortBy === \"input\") sortedItems = items;\n  if (sortBy === \"description\")\n    sortedItems = items\n      .slice()\n      .sort((a, b) => a.description.localeCompare(b.description));\n  if (sortBy === \"packed\")\n    sortedItems = items\n      .slice()\n      .sort((a, b) => Number(a.packed) - Number(b.packed));\n  //Number(fasle) -> 0 ,Number(true) -> 1\n  return (\n    <div className=\"list\">\n      <ul>\n        {sortedItems.map((item) => (\n          <Item\n            item={item}\n            onDeleteItems={onDeleteItems}\n            onToggleItem={onToggleItem}\n            key={item.id}\n          />\n        ))}\n      </ul>\n      <div className=\"actions\">\n        <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>\n          <option value=\"input\">Sort by input</option>\n          <option value=\"description\">Sort by description</option>\n          <option value=\"packed\">Sort by packed</option>\n        </select>\n        <button onClick={onClearAll}>Clear list</button>\n      </div>\n    </div>\n  );\n}\nfunction Item({ item, onDeleteItems, onToggleItem }) {\n  return (\n    <li className=\"list\">\n      <span style={item.packed ? { textDecoration: \"line-through\" } : {}}>\n        <input\n          type=\"checkbox\"\n          onChange={(e) => onToggleItem(item.id)}\n          value={item.packed}\n        />{\" \"}\n        {item.quantity} {item.description}\n        <button onClick={() => onDeleteItems(item.id)}>❌</button>\n      </span>\n    </li>\n  );\n}\nfunction Stats({ items }) {\n  //when items.length = 0,0 is falsy value\n  if (!items.length)\n    return (\n      <footer className=\"stats\">\n        Start adding some items to your packing list 🚀!\n      </footer>\n    );\n  const numItems = items.length;\n  const numPacked = items.filter((item) => item.packed === true).length;\n  const packedPecentage = (numPacked / numItems).toFixed(2) * 100;\n  return (\n    <footer className=\"stats\">\n      {packedPecentage === 100 ? (\n        <em>'You got everything! Ready to go!'</em>\n      ) : (\n        <em>\n          💼 You have {numItems} items in your list, and you already packed\n          {numPacked} ({packedPecentage}%).\n        </em>\n      )}\n    </footer>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}