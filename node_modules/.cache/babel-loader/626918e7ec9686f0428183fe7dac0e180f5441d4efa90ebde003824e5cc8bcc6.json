{"ast":null,"code":"var _jsxFileName = \"/Users/zhiyizhu/Documents/web/Javascript/react/ultimate-react-course-main/05-travel-list/travel-list/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n//1. create form element\n//  - inside the form,use Array.from({length:},callBackFunctionInMapFunction)\n//2. listening for the submit event that happens on the form use onSubmit={}\n//  - the event will happen as soon as we click the button or hit enter while\n//    we are in the input element\n\nimport { useState } from \"react\";\n\n//controlled elements\n//explain    -> by default,input fields maintain their own state inside the DOM,\n//              inside the HTML element itself.This makes it hard to read the values.\n//what we do -> in react ,we usually like to keep all the state in one central place\n//              inside the react application,not inside the DOM\n//              in order to do that ,we use a technique call controlled elements\n//              with this technique,it's react who controls and owns the state of these\n//              input fields not DOM.\n//              - form data changes over time, we need to use state to maintain our\n//                application in sync with it.\n//1.define a state\n//2.use the state on the element we want to control\n//  basically force the element to always take the value of the state variable\n//  then update the state variable with using the onChange handler\n//  - add listener onChange to input field\n//3.set inputValue to stateValue  value={stateValue}\n\n//  keep state and DOM in sync! so we can manipulate the state use setter function\n//  to also manipulate the DOM.\n//  each time the input value change,use setter function to update the changed value\n//  to stateValue:setterFunction(e.target.value).Which will then re-render this view\n//  and then the new state value will get placed there as the value\n//  - we always both need the value and the change in the input tag\n\n//life up state - move state to the closest common parent component\n//whenever multiple sibling components need access to the same state.\n//We move that piece of state to the first common parent component.\n//background:\n//inside Form component,we define a state(and setter function) to allow us use setter\n//function to add items to the state.But we never use/render the state itself inside\n//the Form component.We need to use/render the state in the Packinglist component\n//which is a sibling component to Form component.So we lift the state up to their closest\n//common component -> App\n//steps: 1.lift up state itself and all the logic about updating the state(e.g setter function)\n//         to the closest common parent component\n//       2.pass state itself / and the functio(for updating the state) to child components\n//         where need to access the state,or need to update the state.\n\n//explanation:\n//1.lift state that will need to be accessed by multiple child sibling components.\n//2.pass the state into the child component(PackingList) as props  so that list can be\n//  rendered according to the state passed in\n//3.in order to enable the child component(Form) to update the state,we need to lift up\n//  the handleAddItems function(which contains the setter function()),then pass the\n//  handleAddItems function as a prop to the Form component.In this way ,we can update\n//  state inside Form(child) component\n//  -inside the child component,receive and destruct the props and call it with newly\n//   add item information\n//  -1 is the home of the items/state itself. 3 is all the logic about updating the state\n//  should be in the same component.now 1 + 3 are sitting in the parent component,then we\n//  can give access to the child sibling components by passing state itself and the setter\n//  function as props.So all child components can access to the same state in the parent\n//  component.\n//  -note: we can pass anything as a prop,including function.we can pass the function as\n//         a prop,then access/use the function inside child component.\n\n//derived state\n//state that is computed from an existing piece of state or from props\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialItems = [{\n  id: 1,\n  description: \"Passports\",\n  quantity: 2,\n  packed: false\n}, {\n  id: 2,\n  description: \"Socks\",\n  quantity: 12,\n  packed: false\n}, {\n  id: 3,\n  description: \"charger\",\n  quantity: 12,\n  packed: true\n}, {\n  id: 4,\n  description: \"tooth brush\",\n  quantity: 12,\n  packed: false\n}, {\n  id: 5,\n  description: \"wallet\",\n  quantity: 12,\n  packed: false\n}, {\n  id: 6,\n  description: \"passport\",\n  quantity: 12,\n  packed: true\n}];\nexport default function App() {\n  _s();\n  const [items, setItems] = useState([]);\n  const [numItems, setNumItems] = useState(0);\n  // ❌const numItems = items.length;\n  function handleAddItems(item) {\n    //adding new items to the state\n    setItems(items => [...items, item]);\n    // ❌setNumItems((num) => num + 1);\n  }\n\n  function handleDeleteItems(id) {\n    setItems(items => items.filter(item => item.id !== id));\n  }\n  function handleToggleItem(id) {\n    setItems(items => items.map(item =>\n    //update an object in an array\n    item.id === id ? {\n      ...item,\n      packed: !item.packed\n    } : item));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onAddItems: handleAddItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PackingList, {\n      items: items,\n      onDeleteItems: handleDeleteItems,\n      onToggleItem: handleToggleItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stats, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"skZYraud274T4ryBLt1/ydJDk64=\");\n_c = App;\nfunction Logo() {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"\\uD83C\\uDFDD Far Away \\uD83E\\uDDF3\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 10\n  }, this);\n}\n\n//when submit event is triggered ,react will call the handleSubmit\n//function.It will along pass into the function ,the event object\n//the event object - an object with all the information about the\n//current event\n_c2 = Logo;\nfunction Form({\n  onAddItems\n}) {\n  _s2();\n  const [description, setDescription] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  // const [items, setItems] = useState([]);\n\n  // function handleAddItems(item) {\n  //   //React is all about immutability\n  //   //CAN NOT mutate array when use setter function in state.\n  //   //Just create a new array containing the original and newly added part\n  //   // ❌setItems((items)=>items.push(item))\n\n  //   //adding new items to the state\n  //   setItems((items) => [...items, item]);\n  // }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!description) return;\n    const newItem = {\n      description,\n      quantity,\n      packed: false,\n      id: new Date()\n    };\n    setQuantity(1);\n    setDescription(\"\");\n    // handleAddItems(newItem);\n    onAddItems(newItem);\n    // initialItems.push(newItem);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"add-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"What do you need for your trip \\uD83D\\uDE0D ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: quantity,\n      onChange: e => {\n        setQuantity(e.target.value);\n      },\n      children: Array.from({\n        length: 20\n      }, (_, i) => i + 1).map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: num,\n        children: num\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Item...\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n      // console.log(e.target.value);\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s2(Form, \"N0tyIIElQ4BYmJ0Mle1ZnU9F/l4=\");\n_c3 = Form;\nfunction PackingList({\n  items,\n  onDeleteItems,\n  onToggleItem\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(Item, {\n        item: item,\n        onDeleteItems: onDeleteItems,\n        onToggleItem: onToggleItem\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_c4 = PackingList;\nfunction Item({\n  item,\n  onDeleteItems,\n  onToggleItem\n}) {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"list\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      style: item.packed ? {\n        textDecoration: \"line-through\"\n      } : {},\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: e => onToggleItem(item.id),\n        value: item.packed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), \" \", item.quantity, \" \", item.description, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onDeleteItems(item.id),\n        children: \"\\u274C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n_c5 = Item;\nfunction Stats() {\n  return /*#__PURE__*/_jsxDEV(\"footer\", {\n    className: \"stats\",\n    children: \"\\uD83D\\uDCBC You have X items in your list, and you already packed X(X%).\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_c6 = Stats;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Logo\");\n$RefreshReg$(_c3, \"Form\");\n$RefreshReg$(_c4, \"PackingList\");\n$RefreshReg$(_c5, \"Item\");\n$RefreshReg$(_c6, \"Stats\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","initialItems","id","description","quantity","packed","App","_s","items","setItems","numItems","setNumItems","handleAddItems","item","handleDeleteItems","filter","handleToggleItem","map","children","Logo","fileName","_jsxFileName","lineNumber","columnNumber","Form","onAddItems","PackingList","onDeleteItems","onToggleItem","Stats","_c","_c2","_s2","setDescription","setQuantity","handleSubmit","e","preventDefault","newItem","Date","className","onSubmit","value","onChange","target","Array","from","length","_","i","num","type","placeholder","_c3","Item","_c4","style","textDecoration","onClick","_c5","_c6","$RefreshReg$"],"sources":["/Users/zhiyizhu/Documents/web/Javascript/react/ultimate-react-course-main/05-travel-list/travel-list/src/App.js"],"sourcesContent":["//1. create form element\n//  - inside the form,use Array.from({length:},callBackFunctionInMapFunction)\n//2. listening for the submit event that happens on the form use onSubmit={}\n//  - the event will happen as soon as we click the button or hit enter while\n//    we are in the input element\n\nimport { useState } from \"react\";\n\n//controlled elements\n//explain    -> by default,input fields maintain their own state inside the DOM,\n//              inside the HTML element itself.This makes it hard to read the values.\n//what we do -> in react ,we usually like to keep all the state in one central place\n//              inside the react application,not inside the DOM\n//              in order to do that ,we use a technique call controlled elements\n//              with this technique,it's react who controls and owns the state of these\n//              input fields not DOM.\n//              - form data changes over time, we need to use state to maintain our\n//                application in sync with it.\n//1.define a state\n//2.use the state on the element we want to control\n//  basically force the element to always take the value of the state variable\n//  then update the state variable with using the onChange handler\n//  - add listener onChange to input field\n//3.set inputValue to stateValue  value={stateValue}\n\n//  keep state and DOM in sync! so we can manipulate the state use setter function\n//  to also manipulate the DOM.\n//  each time the input value change,use setter function to update the changed value\n//  to stateValue:setterFunction(e.target.value).Which will then re-render this view\n//  and then the new state value will get placed there as the value\n//  - we always both need the value and the change in the input tag\n\n//life up state - move state to the closest common parent component\n//whenever multiple sibling components need access to the same state.\n//We move that piece of state to the first common parent component.\n//background:\n//inside Form component,we define a state(and setter function) to allow us use setter\n//function to add items to the state.But we never use/render the state itself inside\n//the Form component.We need to use/render the state in the Packinglist component\n//which is a sibling component to Form component.So we lift the state up to their closest\n//common component -> App\n//steps: 1.lift up state itself and all the logic about updating the state(e.g setter function)\n//         to the closest common parent component\n//       2.pass state itself / and the functio(for updating the state) to child components\n//         where need to access the state,or need to update the state.\n\n//explanation:\n//1.lift state that will need to be accessed by multiple child sibling components.\n//2.pass the state into the child component(PackingList) as props  so that list can be\n//  rendered according to the state passed in\n//3.in order to enable the child component(Form) to update the state,we need to lift up\n//  the handleAddItems function(which contains the setter function()),then pass the\n//  handleAddItems function as a prop to the Form component.In this way ,we can update\n//  state inside Form(child) component\n//  -inside the child component,receive and destruct the props and call it with newly\n//   add item information\n//  -1 is the home of the items/state itself. 3 is all the logic about updating the state\n//  should be in the same component.now 1 + 3 are sitting in the parent component,then we\n//  can give access to the child sibling components by passing state itself and the setter\n//  function as props.So all child components can access to the same state in the parent\n//  component.\n//  -note: we can pass anything as a prop,including function.we can pass the function as\n//         a prop,then access/use the function inside child component.\n\n//derived state\n//state that is computed from an existing piece of state or from props\n\nconst initialItems = [\n  { id: 1, description: \"Passports\", quantity: 2, packed: false },\n  { id: 2, description: \"Socks\", quantity: 12, packed: false },\n  { id: 3, description: \"charger\", quantity: 12, packed: true },\n  { id: 4, description: \"tooth brush\", quantity: 12, packed: false },\n  { id: 5, description: \"wallet\", quantity: 12, packed: false },\n  { id: 6, description: \"passport\", quantity: 12, packed: true },\n];\n\nexport default function App() {\n  const [items, setItems] = useState([]);\n  const [numItems, setNumItems] = useState(0);\n  // ❌const numItems = items.length;\n  function handleAddItems(item) {\n    //adding new items to the state\n    setItems((items) => [...items, item]);\n    // ❌setNumItems((num) => num + 1);\n  }\n  function handleDeleteItems(id) {\n    setItems((items) => items.filter((item) => item.id !== id));\n  }\n  function handleToggleItem(id) {\n    setItems((items) =>\n      items.map((item) =>\n        //update an object in an array\n        item.id === id ? { ...item, packed: !item.packed } : item\n      )\n    );\n  }\n  return (\n    <div>\n      <Logo />\n      {/* naming convention onFunctioName = handleFunctionName */}\n      <Form onAddItems={handleAddItems} />\n      <PackingList\n        items={items}\n        onDeleteItems={handleDeleteItems}\n        onToggleItem={handleToggleItem}\n      />\n      <Stats />\n    </div>\n  );\n}\nfunction Logo() {\n  return <h1>🏝 Far Away 🧳</h1>;\n}\n\n//when submit event is triggered ,react will call the handleSubmit\n//function.It will along pass into the function ,the event object\n//the event object - an object with all the information about the\n//current event\n\nfunction Form({ onAddItems }) {\n  const [description, setDescription] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  // const [items, setItems] = useState([]);\n\n  // function handleAddItems(item) {\n  //   //React is all about immutability\n  //   //CAN NOT mutate array when use setter function in state.\n  //   //Just create a new array containing the original and newly added part\n  //   // ❌setItems((items)=>items.push(item))\n\n  //   //adding new items to the state\n  //   setItems((items) => [...items, item]);\n  // }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!description) return;\n    const newItem = { description, quantity, packed: false, id: new Date() };\n    setQuantity(1);\n    setDescription(\"\");\n    // handleAddItems(newItem);\n    onAddItems(newItem);\n    // initialItems.push(newItem);\n  }\n  return (\n    <form className=\"add-form\" onSubmit={handleSubmit}>\n      <h3>What do you need for your trip 😍 ?</h3>\n      <select\n        value={quantity}\n        onChange={(e) => {\n          setQuantity(e.target.value);\n        }}\n      >\n        {Array.from({ length: 20 }, (_, i) => i + 1).map((num) => (\n          <option value={num}>{num}</option>\n        ))}\n      </select>\n      <input\n        type=\"text\"\n        placeholder=\"Item...\"\n        value={description}\n        onChange={\n          (e) => setDescription(e.target.value)\n          // console.log(e.target.value);\n        }\n      ></input>\n      <button>Add</button>\n    </form>\n  );\n}\n\nfunction PackingList({ items, onDeleteItems, onToggleItem }) {\n  return (\n    <div className=\"list\">\n      <ul>\n        {items.map((item) => (\n          <Item\n            item={item}\n            onDeleteItems={onDeleteItems}\n            onToggleItem={onToggleItem}\n            key={item.id}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\nfunction Item({ item, onDeleteItems, onToggleItem }) {\n  return (\n    <li className=\"list\">\n      <span style={item.packed ? { textDecoration: \"line-through\" } : {}}>\n        <input\n          type=\"checkbox\"\n          onChange={(e) => onToggleItem(item.id)}\n          value={item.packed}\n        />{\" \"}\n        {item.quantity} {item.description}\n        <button onClick={() => onDeleteItems(item.id)}>❌</button>\n      </span>\n    </li>\n  );\n}\nfunction Stats() {\n  return (\n    <footer className=\"stats\">\n      💼 You have X items in your list, and you already packed X(X%).\n    </footer>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}