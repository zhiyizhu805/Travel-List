{"ast":null,"code":"var _jsxFileName = \"/Users/zhiyizhu/Documents/web/Javascript/Travel-List/src/components/App.js\",\n  _s = $RefreshSig$();\n//1. create form element\n//  - inside the form,use Array.from({length:},callBackFunctionInMapFunction)\n//2. listening for the submit event that happens on the form use onSubmit={}\n//  - the event will happen as soon as we click the button or hit enter while\n//    we are in the input element\n\nimport { useState } from \"react\";\nimport Logo from \"./logo.js\";\nimport Form from \"./form.js\";\n// import { PackingList } from \"./PackingList.js\";   //named import\nimport PackingList from \"./PackingList.js\";\n//❌ import Item from \"./Item.js\";  //import in packinglist file\nimport Stats from \"./Stats.js\";\n//controlled elements\n//explain    -> by default,input fields maintain their own state inside the DOM,\n//              inside the HTML element itself.This makes it hard to read the values.\n//what we do -> in react ,we usually like to keep all the state in one central place\n//              inside the react application,not inside the DOM\n//              in order to do that ,we use a technique call controlled elements\n//              with this technique,it's react who controls and owns the state of these\n//              input fields not DOM.\n//              - form data changes over time, we need to use state to maintain our\n//                application in sync with it.\n//1.define a state\n//2.use the state on the element we want to control\n//  basically force the element to always take the value of the state variable\n//  then update the state variable with using the onChange handler\n//  - add listener onChange to input field\n//3.set inputValue to stateValue  value={stateValue}\n\n//  keep state and DOM in sync! so we can manipulate the state use setter function\n//  to also manipulate the DOM.\n//  each time the input value change,use setter function to update the changed value\n//  to stateValue:setterFunction(e.target.value).Which will then re-render this view\n//  and then the new state value will get placed there as the value\n//  - we always both need the value and the change in the input tag\n\n//life up state - move state to the closest common parent component\n//whenever multiple sibling components need access to the same state.\n//We move that piece of state to the first common parent component.\n//background:\n//inside Form component,we define a state(and setter function) to allow us use setter\n//function to add items to the state.But we never use/render the state itself inside\n//the Form component.We need to use/render the state in the Packinglist component\n//which is a sibling component to Form component.So we lift the state up to their closest\n//common component -> App\n//steps: 1.lift up state itself and all the logic about updating the state(e.g setter function)\n//         to the closest common parent component\n//       2.pass state itself / and the functio(for updating the state) to child components\n//         where need to access the state,or need to update the state.\n\n//explanation:\n//1.lift state that will need to be accessed by multiple child sibling components.\n//2.pass the state into the child component(PackingList) as props  so that list can be\n//  rendered according to the state passed in\n//3.in order to enable the child component(Form) to update the state,we need to lift up\n//  the handleAddItems function(which contains the setter function()),then pass the\n//  handleAddItems function as a prop to the Form component.In this way ,we can update\n//  state inside Form(child) component\n//  -inside the child component,receive and destruct the props and call it with newly\n//   add item information\n//  -1 is the home of the items/state itself. 3 is all the logic about updating the state\n//  should be in the same component.now 1 + 3 are sitting in the parent component,then we\n//  can give access to the child sibling components by passing state itself and the setter\n//  function as props.So all child components can access to the same state in the parent\n//  component.\n//  -note: we can pass anything as a prop,including function.we can pass the function as\n//         a prop,then access/use the function inside child component.\n\n//derived state\n//derived state/variable is computed from an existing piece of state or from props\n//when the existing state updated,the component will be re-rendered.\n//the derived state(variable) will also be recalculate based on new situdation\n// const initialItems = [\n//   { id: 1, description: \"Passports\", quantity: 2, packed: false },\n//   { id: 2, description: \"Socks\", quantity: 12, packed: false },\n//   { id: 3, description: \"charger\", quantity: 12, packed: true },\n//   { id: 4, description: \"tooth brush\", quantity: 12, packed: false },\n//   { id: 5, description: \"wallet\", quantity: 12, packed: false },\n//   { id: 6, description: \"passport\", quantity: 12, packed: true },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [items, setItems] = useState([]);\n  //❌ const [numItems, setNumItems] = useState(0);\n  // const numItems = items.length;\n  function handleAddItems(item) {\n    //adding new items to the state\n    setItems(items => [...items, item]);\n  }\n  function handleDeleteItems(id) {\n    setItems(items => items.filter(item => item.id !== id));\n  }\n  function handleToggleItem(id) {\n    setItems(items => items.map(item =>\n    //update an object in an array\n    item.id === id ? {\n      ...item,\n      packed: !item.packed\n    } : item));\n  }\n  function handleClearAll() {\n    //create a web API function to double check\n    const confirmed = window.confirm(\"Are you sure you want to delete all items?\");\n    // setItems((items) => []);\n    if (confirmed) setItems([]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onAddItems: handleAddItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PackingList, {\n      items: items,\n      onDeleteItems: handleDeleteItems,\n      onToggleItem: handleToggleItem,\n      onClearAll: handleClearAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stats, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6WAym07vHedVzpAy8bFDJKqtv8I=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Logo","Form","PackingList","Stats","jsxDEV","_jsxDEV","App","_s","items","setItems","handleAddItems","item","handleDeleteItems","id","filter","handleToggleItem","map","packed","handleClearAll","confirmed","window","confirm","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddItems","onDeleteItems","onToggleItem","onClearAll","_c","$RefreshReg$"],"sources":["/Users/zhiyizhu/Documents/web/Javascript/Travel-List/src/components/App.js"],"sourcesContent":["//1. create form element\n//  - inside the form,use Array.from({length:},callBackFunctionInMapFunction)\n//2. listening for the submit event that happens on the form use onSubmit={}\n//  - the event will happen as soon as we click the button or hit enter while\n//    we are in the input element\n\nimport { useState } from \"react\";\nimport Logo from \"./logo.js\";\nimport Form from \"./form.js\";\n// import { PackingList } from \"./PackingList.js\";   //named import\nimport PackingList from \"./PackingList.js\";\n//❌ import Item from \"./Item.js\";  //import in packinglist file\nimport Stats from \"./Stats.js\";\n//controlled elements\n//explain    -> by default,input fields maintain their own state inside the DOM,\n//              inside the HTML element itself.This makes it hard to read the values.\n//what we do -> in react ,we usually like to keep all the state in one central place\n//              inside the react application,not inside the DOM\n//              in order to do that ,we use a technique call controlled elements\n//              with this technique,it's react who controls and owns the state of these\n//              input fields not DOM.\n//              - form data changes over time, we need to use state to maintain our\n//                application in sync with it.\n//1.define a state\n//2.use the state on the element we want to control\n//  basically force the element to always take the value of the state variable\n//  then update the state variable with using the onChange handler\n//  - add listener onChange to input field\n//3.set inputValue to stateValue  value={stateValue}\n\n//  keep state and DOM in sync! so we can manipulate the state use setter function\n//  to also manipulate the DOM.\n//  each time the input value change,use setter function to update the changed value\n//  to stateValue:setterFunction(e.target.value).Which will then re-render this view\n//  and then the new state value will get placed there as the value\n//  - we always both need the value and the change in the input tag\n\n//life up state - move state to the closest common parent component\n//whenever multiple sibling components need access to the same state.\n//We move that piece of state to the first common parent component.\n//background:\n//inside Form component,we define a state(and setter function) to allow us use setter\n//function to add items to the state.But we never use/render the state itself inside\n//the Form component.We need to use/render the state in the Packinglist component\n//which is a sibling component to Form component.So we lift the state up to their closest\n//common component -> App\n//steps: 1.lift up state itself and all the logic about updating the state(e.g setter function)\n//         to the closest common parent component\n//       2.pass state itself / and the functio(for updating the state) to child components\n//         where need to access the state,or need to update the state.\n\n//explanation:\n//1.lift state that will need to be accessed by multiple child sibling components.\n//2.pass the state into the child component(PackingList) as props  so that list can be\n//  rendered according to the state passed in\n//3.in order to enable the child component(Form) to update the state,we need to lift up\n//  the handleAddItems function(which contains the setter function()),then pass the\n//  handleAddItems function as a prop to the Form component.In this way ,we can update\n//  state inside Form(child) component\n//  -inside the child component,receive and destruct the props and call it with newly\n//   add item information\n//  -1 is the home of the items/state itself. 3 is all the logic about updating the state\n//  should be in the same component.now 1 + 3 are sitting in the parent component,then we\n//  can give access to the child sibling components by passing state itself and the setter\n//  function as props.So all child components can access to the same state in the parent\n//  component.\n//  -note: we can pass anything as a prop,including function.we can pass the function as\n//         a prop,then access/use the function inside child component.\n\n//derived state\n//derived state/variable is computed from an existing piece of state or from props\n//when the existing state updated,the component will be re-rendered.\n//the derived state(variable) will also be recalculate based on new situdation\n// const initialItems = [\n//   { id: 1, description: \"Passports\", quantity: 2, packed: false },\n//   { id: 2, description: \"Socks\", quantity: 12, packed: false },\n//   { id: 3, description: \"charger\", quantity: 12, packed: true },\n//   { id: 4, description: \"tooth brush\", quantity: 12, packed: false },\n//   { id: 5, description: \"wallet\", quantity: 12, packed: false },\n//   { id: 6, description: \"passport\", quantity: 12, packed: true },\n// ];\n\nexport default function App() {\n  const [items, setItems] = useState([]);\n  //❌ const [numItems, setNumItems] = useState(0);\n  // const numItems = items.length;\n  function handleAddItems(item) {\n    //adding new items to the state\n    setItems((items) => [...items, item]);\n  }\n  function handleDeleteItems(id) {\n    setItems((items) => items.filter((item) => item.id !== id));\n  }\n  function handleToggleItem(id) {\n    setItems((items) =>\n      items.map((item) =>\n        //update an object in an array\n        item.id === id ? { ...item, packed: !item.packed } : item\n      )\n    );\n  }\n\n  function handleClearAll() {\n    //create a web API function to double check\n    const confirmed = window.confirm(\n      \"Are you sure you want to delete all items?\"\n    );\n    // setItems((items) => []);\n    if (confirmed) setItems([]);\n  }\n  return (\n    <div>\n      <Logo />\n      {/* naming convention onFunctioName = handleFunctionName */}\n      <Form onAddItems={handleAddItems} />\n      <PackingList\n        items={items}\n        onDeleteItems={handleDeleteItems}\n        onToggleItem={handleToggleItem}\n        onClearAll={handleClearAll}\n      />\n      <Stats items={items} />\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,IAAI,MAAM,WAAW;AAC5B;AACA,OAAOC,WAAW,MAAM,kBAAkB;AAC1C;AACA,OAAOC,KAAK,MAAM,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA;EACA,SAASW,cAAcA,CAACC,IAAI,EAAE;IAC5B;IACAF,QAAQ,CAAED,KAAK,IAAK,CAAC,GAAGA,KAAK,EAAEG,IAAI,CAAC,CAAC;EACvC;EACA,SAASC,iBAAiBA,CAACC,EAAE,EAAE;IAC7BJ,QAAQ,CAAED,KAAK,IAAKA,KAAK,CAACM,MAAM,CAAEH,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC7D;EACA,SAASE,gBAAgBA,CAACF,EAAE,EAAE;IAC5BJ,QAAQ,CAAED,KAAK,IACbA,KAAK,CAACQ,GAAG,CAAEL,IAAI;IACb;IACAA,IAAI,CAACE,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGF,IAAI;MAAEM,MAAM,EAAE,CAACN,IAAI,CAACM;IAAO,CAAC,GAAGN,IACvD,CACF,CAAC;EACH;EAEA,SAASO,cAAcA,CAAA,EAAG;IACxB;IACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,OAAO,CAC9B,4CACF,CAAC;IACD;IACA,IAAIF,SAAS,EAAEV,QAAQ,CAAC,EAAE,CAAC;EAC7B;EACA,oBACEJ,OAAA;IAAAiB,QAAA,gBACEjB,OAAA,CAACL,IAAI;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAERrB,OAAA,CAACJ,IAAI;MAAC0B,UAAU,EAAEjB;IAAe;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpCrB,OAAA,CAACH,WAAW;MACVM,KAAK,EAAEA,KAAM;MACboB,aAAa,EAAEhB,iBAAkB;MACjCiB,YAAY,EAAEd,gBAAiB;MAC/Be,UAAU,EAAEZ;IAAe;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACFrB,OAAA,CAACF,KAAK;MAACK,KAAK,EAAEA;IAAM;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV;AAACnB,EAAA,CA1CuBD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}